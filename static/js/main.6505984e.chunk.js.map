{"version":3,"sources":["pages/Gameboard.js","pages/Joinform.js","App.js","reportWebVitals.js","index.js","game/Omok.ts"],"names":["textureMap","Board","board","place","e","x","y","alert","Function","className","map","array","val","onClick","alt","src","width","length","Gameboard","history","useHistory","useState","JSON","parse","sessionStorage","getItem","state","changeState","useEffect","document","querySelector","innerHTML","status","Omok","boardWidth","boardHeight","console","log","push","setItem","stringify","hasOwnProperty","data","loadData","placeEvent","getColor","run","Joinform","joinMode","startText","disableSizeInput","disablePassword","changer","form","React","createRef","roomName","password","passwordable","changeJoinMode","target","id","ref","onSubmit","info","current","valueAsNumber","name","value","type","placeholder","required","minLength","onChange","checked","disabled","min","max","defaultChecked","App","basename","process","exact","path","component","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","height","winCount","winEvents","result","t","color","winCheck","winStack","isWin","ways","i","l","start","vecX","vecY","forEach","count","win","handler","eval","this","origin"],"mappings":"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","file":"static/js/main.6505984e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Omok } from \"../game\";\r\nimport LioWebRTC from 'liowebrtc';\r\nimport './Gameboard.css';\r\n\r\nconst publish = false;\r\n\r\nconst textureMap = {\r\n    \"none\": \"img/stone-none.png\",\r\n    \"black\": \"img/stone-black.png\"\r\n};\r\n\r\nfunction Board({board, place = (e, x, y) => { alert(x + \" / \" + y); }}){\r\n        if(board != null && typeof board.board == typeof Function) {\r\n            return (\r\n                <div className=\"board\">\r\n                    {board.board().map((array, y) => (<div className=\"line\" key={y}>\r\n                        {array.map((val, x) => (\r\n                            <img \r\n                                onClick={(e) => place(e, x, y)} alt=\"cell\" key={y * array.length + x} \r\n                                src={(publish ? \"./\" : \"\") + textureMap[val]} width=\"3%\"\r\n                            />\r\n                        ))}\r\n                        <br/>\r\n                    </div>))}\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<div>loading...</div>)\r\n        }\r\n    };\r\n\r\nconst Gameboard = () => {\r\n    const history = useHistory();\r\n\r\n    const [state, changeState] = useState(JSON.parse(sessionStorage.getItem(\"game\")));\r\n    const [lio, rtcConfigure] = useState({\r\n        \r\n    });\r\n\r\n    useEffect(() => {\r\n        // mount\r\n        // page load\r\n        document.querySelector(\"title\").innerHTML = \"Omok\";\r\n        \r\n        // Game loading\r\n        if(state != null) {\r\n            if(state.state === \"start\") {\r\n                changeState({...state, state: \"progress\", status: new Omok(state.boardWidth, state.boardHeight)});\r\n                console.log(state);\r\n            }\r\n        } else {\r\n            alert(\"올바르지 않은 접근으로 인해 첫 화면으로 이동됩니다.\");\r\n            history.push(\"/\");\r\n        }\r\n\r\n        return () => {\r\n            // unmount\r\n            if(state != null) {\r\n                sessionStorage.setItem(\"game\", JSON.stringify(state));\r\n            }\r\n        }\r\n    } , [state, changeState, history]);\r\n    \r\n    // Sync\r\n    \r\n    if(state != null) {\r\n        if(state.status == null) {\r\n            changeState({...state, status: new Omok(state.boardWidth, state.boardHeight)})\r\n        } else if(typeof state.status != typeof Omok) {\r\n            if(!state.status.hasOwnProperty(\"board\")) {\r\n                let data = Omok.loadData(state.status);\r\n                changeState({...state, status: data})\r\n            }\r\n        }\r\n    }\r\n    \r\n    // events\r\n    \r\n    const placeEvent = (e, x, y) => {\r\n        if(state.status.getColor(x, y) === \"none\") {\r\n            changeState({...state, run: state.status.place(x, y, \"black\")});\r\n            changeState({...state, run: null});\r\n        }\r\n    };\r\n    \r\n    // webrtc(module - liowebrtc) events\r\n    \r\n    const joinHandler = (e) => {\r\n        \r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"gameboard\">\r\n            {(() => state != null ? <Board board={state.status} place={placeEvent}/> : null)()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Gameboard;","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './Joinform.css';\r\n\r\n\r\nconst Joinform = () => {\r\n  const history = useHistory();\r\n\r\n  const [state, changer] = useState({\r\n    joinMode: \"create\",\r\n    startText: \"방 만들기\",\r\n    disableSizeInput: false,\r\n    disablePassword: true\r\n  });\r\n\r\n  // reference sync\r\n  const form = React.createRef();\r\n  const roomName = React.createRef();\r\n  const password = React.createRef(), passwordable = React.createRef();\r\n  const boardWidth = React.createRef(), boardHeight = React.createRef();\r\n\r\n  useEffect(() => {\r\n    // mount\r\n    // page load\r\n    document.querySelector(\"title\").innerHTML = \"Omok\";\r\n\r\n    return () => {\r\n      // unmount\r\n    }\r\n  } ,[]);\r\n\r\n  // event\r\n  const startGame = (e) => {\r\n    let info = {\r\n      boardWidth: boardWidth.current.valueAsNumber,\r\n      boardHeight: boardHeight.current.valueAsNumber,\r\n      name: roomName.current.value,\r\n      state: \"start\",\r\n      password:\"\"\r\n    };\r\n    if(!state.disablePassword) {\r\n      info[\"password\"] = password.current.value;\r\n    } else {\r\n      delete info.password;\r\n    }\r\n    sessionStorage.setItem(\"game\", JSON.stringify(info));\r\n    history.push(\"/Omok/board\");\r\n  }\r\n\r\n  const changeJoinMode = (e) => {\r\n    changer({...state, joinMode: e.target.id});\r\n    switch (e.target.id) {\r\n      case \"create\":\r\n        changer({...state, disableSizeInput: false, startText: \"방 만들기\"})\r\n      return;\r\n\r\n      case \"join\":\r\n        changer({...state, disableSizeInput: true, startText: \"게임 참여\"});\r\n      return;\r\n\r\n      case \"spectate\":\r\n        changer({...state, disableSizeInput: true, startText: \"관전하기\"});\r\n      return;\r\n\r\n      case \"replay\":\r\n        changer({...state, disableSizeInput: true, startText: \"게임 다시보기\"});\r\n      return;\r\n\r\n      default:\r\n      return;\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"joinform\">\r\n      <form className=\"inputform\" ref={form} onSubmit={startGame}>\r\n        <input\r\n          className=\"roomName full\" name=\"roomName\" ref={roomName}\r\n          type=\"text\" placeholder=\"방 이름\" \r\n          required minLength={3}\r\n        />\r\n        <br/>\r\n        <div className=\"password\">\r\n          <input \r\n            className=\"passwordable\" name=\"passwordable\" ref={passwordable}\r\n            onChange={() => {changer({...state, disablePassword: !passwordable.current.checked})}}\r\n            type=\"checkbox\" \r\n          />\r\n          <input\r\n            className=\"password\" name=\"password\" ref={password} disabled={state.disablePassword}\r\n            type=\"password\" placeholder=\"방 접속 암호\" \r\n            required minLength={4}\r\n          />\r\n        </div>\r\n        <div className=\"size\">\r\n          <input\r\n            name=\"boardWidth\" ref={boardWidth} disabled={state.disableSizeInput}\r\n            type=\"number\" placeholder=\"가로\"\r\n            required min={15} max={100}\r\n          />\r\n          <input\r\n            name=\"boardHeight\" ref={boardHeight} disabled={state.disableSizeInput}\r\n            type=\"number\" placeholder=\"세로\"\r\n            required min={15} max={100}\r\n          />\r\n        </div>\r\n        <br/>\r\n        <div className=\"joinMode\">\r\n          <input\r\n            name=\"joinMode\" id=\"create\"\r\n            onChange={changeJoinMode}\r\n            type=\"radio\" value=\"create\" defaultChecked\r\n          />방 만들기 &nbsp;\r\n          <input\r\n            name=\"joinMode\" id=\"join\"\r\n            onChange={changeJoinMode}\r\n            type=\"radio\" value=\"join\"\r\n          />참여 &nbsp;\r\n          <input\r\n            name=\"joinMode\" id=\"spectate\"\r\n            onChange={changeJoinMode}\r\n            type=\"radio\" value=\"spectate\"\r\n          />관전 &nbsp;\r\n          <input\r\n            name=\"joinMode\" id=\"replay\"\r\n            onChange={changeJoinMode}\r\n            type=\"radio\" value=\"replay\"\r\n          />리플레이\r\n        </div>\r\n        <br/>\r\n        <input\r\n          className=\"start\"\r\n          type=\"submit\" value={state.startText}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Joinform;","import React from 'react';\nimport { Route, HashRouter } from 'react-router-dom';\nimport { Gameboard, Joinform } from './pages';\n\nfunction App() {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Route exact path=\"/Omok/\" component={Joinform}/>\n      <Route path=\"/Omok/board\" component={Gameboard}/>\n    </HashRouter>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","/* eslint-disable no-eval */\r\nclass Omok {\r\n  map: string[] = [];\r\n  width: number;\r\n  height: number;\r\n  winCount: number;\r\n  winEvents: string[] = [];\r\n\r\n  constructor(width: number = 15, height: number = 15, winCount: number = 5) {\r\n    this.map.length = width * height;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.winCount = winCount;\r\n    for (let i = 0; i < this.map.length; i++) {\r\n      this.map[i] = \"none\";\r\n    }\r\n  }\r\n\r\n  static loadData(origin: Omok): Omok {\r\n    let result: Omok = new Omok();\r\n    result.map = origin.map;\r\n    result.width = origin.width;\r\n    result.height = origin.height;\r\n    result.winCount = origin.winCount;\r\n    result.winEvents = origin.winEvents;\r\n    return result;\r\n  }\r\n\r\n  readonly board: Function = (): string[][] => {\r\n    const result: string[][] = [];\r\n    for (let y = 0; y < this.height; y++) {\r\n      const t: string[] = [];\r\n      for (let x = 0; x < this.width; x++) {\r\n        t.push(this.map[x + y * this.width]);\r\n      }\r\n      result.push(t);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  readonly getColor: Function = (x: number, y: number): string => {\r\n    if (x + y * this.width < this.map.length) {\r\n      return this.map[x + y * this.width];\r\n    } else {\r\n      return \"none\";\r\n    }\r\n  };\r\n\r\n  readonly place: Function = (\r\n    x: number,\r\n    y: number,\r\n    color: string = \"black\"\r\n  ): void => {\r\n    if (x != null && y != null && color != null) {\r\n      this.map[x + y * this.width] = color;\r\n      this.winCheck(x, y, color);\r\n    }\r\n  };\r\n\r\n  private readonly winCheck: Function = (\r\n    x: number,\r\n    y: number,\r\n    color = \"black\"\r\n  ): boolean => {\r\n    x = 0;\r\n    y = 0;\r\n    let winStack = [1, 1, 1, 1];\r\n    let isWin = false;\r\n    let ways = [\r\n      [-1, 1],\r\n      [0, 1],\r\n      [1, 1],\r\n      [1, 0],\r\n    ];\r\n    for (let i = 0; i < ways.length; i++) {\r\n      for (let l = -1; l < 2; l += 2) {\r\n        let start = [x, y],\r\n          vecX = ways[i][0] * l,\r\n          vecY = ways[i][1] * l;\r\n        while (this.getColor(start[0] + vecX, start[1] + vecX) === color) {\r\n          winStack[i]++;\r\n          start[0] += vecX;\r\n          start[1] += vecY;\r\n        }\r\n      }\r\n    }\r\n\r\n    winStack.forEach((count) => {\r\n      if (count >= this.winCount) {\r\n        isWin = true;\r\n      }\r\n    });\r\n\r\n    if (isWin) {\r\n      this.win();\r\n    }\r\n    return isWin;\r\n  };\r\n\r\n  private readonly win: Function = (): void => {\r\n    this.winEvents.forEach((handler) => {\r\n      eval(handler);\r\n    });\r\n  };\r\n}\r\n\r\nexport default Omok;"],"sourceRoot":""}